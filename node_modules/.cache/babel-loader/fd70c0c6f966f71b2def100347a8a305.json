{"ast":null,"code":"var isDigit = require('../tokenizer').isDigit;\n\nvar cmpChar = require('../tokenizer').cmpChar;\n\nvar TYPE = require('../tokenizer').TYPE;\n\nvar DELIM = TYPE.Delim;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nvar N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\n\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction isDelim(token, code) {\n  return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction skipSC(token, offset, getNextToken) {\n  while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {\n    token = getNextToken(++offset);\n  }\n\n  return offset;\n}\n\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n  if (!token) {\n    return 0;\n  }\n\n  var code = token.value.charCodeAt(valueOffset);\n\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      // Number sign is not allowed\n      return 0;\n    }\n\n    valueOffset++;\n  }\n\n  for (; valueOffset < token.value.length; valueOffset++) {\n    if (!isDigit(token.value.charCodeAt(valueOffset))) {\n      // Integer is expected\n      return 0;\n    }\n  }\n\n  return offset + 1;\n} // ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\n\n\nfunction consumeB(token, offset_, getNextToken) {\n  var sign = false;\n  var offset = skipSC(token, offset_, getNextToken);\n  token = getNextToken(offset);\n\n  if (token === null) {\n    return offset_;\n  }\n\n  if (token.type !== NUMBER) {\n    if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n      sign = true;\n      offset = skipSC(getNextToken(++offset), offset, getNextToken);\n      token = getNextToken(offset);\n\n      if (token === null && token.type !== NUMBER) {\n        return 0;\n      }\n    } else {\n      return offset_;\n    }\n  }\n\n  if (!sign) {\n    var code = token.value.charCodeAt(0);\n\n    if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n      // Number sign is expected\n      return 0;\n    }\n  }\n\n  return checkInteger(token, sign ? 0 : 1, sign, offset);\n} // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\n\n\nmodule.exports = function anPlusB(token, getNextToken) {\n  /* eslint-disable brace-style*/\n  var offset = 0;\n\n  if (!token) {\n    return 0;\n  } // <integer>\n\n\n  if (token.type === NUMBER) {\n    return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n  } // -n\n  // -n <signed-integer>\n  // -n ['+' | '-'] <signless-integer>\n  // -n- <signless-integer>\n  // <dashndashdigit-ident>\n  else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {\n    // expect 1st char is N\n    if (!cmpChar(token.value, 1, N)) {\n      return 0;\n    }\n\n    switch (token.value.length) {\n      // -n\n      // -n <signed-integer>\n      // -n ['+' | '-'] <signless-integer>\n      case 2:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n      // -n- <signless-integer>\n\n      case 3:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n      // <dashndashdigit-ident>\n\n      default:\n        if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n          return 0;\n        }\n\n        return checkInteger(token, 3, DISALLOW_SIGN, offset);\n    }\n  } // '+'? n\n  // '+'? n <signed-integer>\n  // '+'? n ['+' | '-'] <signless-integer>\n  // '+'? n- <signless-integer>\n  // '+'? <ndashdigit-ident>\n  else if (token.type === IDENT || isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT) {\n    // just ignore a plus\n    if (token.type !== IDENT) {\n      token = getNextToken(++offset);\n    }\n\n    if (token === null || !cmpChar(token.value, 0, N)) {\n      return 0;\n    }\n\n    switch (token.value.length) {\n      // '+'? n\n      // '+'? n <signed-integer>\n      // '+'? n ['+' | '-'] <signless-integer>\n      case 1:\n        return consumeB(getNextToken(++offset), offset, getNextToken);\n      // '+'? n- <signless-integer>\n\n      case 2:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n      // '+'? <ndashdigit-ident>\n\n      default:\n        if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n          return 0;\n        }\n\n        return checkInteger(token, 2, DISALLOW_SIGN, offset);\n    }\n  } // <ndashdigit-dimension>\n  // <ndash-dimension> <signless-integer>\n  // <n-dimension>\n  // <n-dimension> <signed-integer>\n  // <n-dimension> ['+' | '-'] <signless-integer>\n  else if (token.type === DIMENSION) {\n    var code = token.value.charCodeAt(0);\n    var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n\n    for (var i = sign; i < token.value.length; i++) {\n      if (!isDigit(token.value.charCodeAt(i))) {\n        break;\n      }\n    }\n\n    if (i === sign) {\n      // Integer is expected\n      return 0;\n    }\n\n    if (!cmpChar(token.value, i, N)) {\n      return 0;\n    } // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n\n\n    if (i + 1 === token.value.length) {\n      return consumeB(getNextToken(++offset), offset, getNextToken);\n    } else {\n      if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n        return 0;\n      } // <ndash-dimension> <signless-integer>\n\n\n      if (i + 2 === token.value.length) {\n        offset = skipSC(getNextToken(++offset), offset, getNextToken);\n        token = getNextToken(offset);\n        return checkInteger(token, 0, DISALLOW_SIGN, offset);\n      } // <ndashdigit-dimension>\n      else {\n        return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n      }\n    }\n  }\n\n  return 0;\n};","map":{"version":3,"names":["isDigit","require","cmpChar","TYPE","DELIM","Delim","WHITESPACE","WhiteSpace","COMMENT","Comment","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","N","DISALLOW_SIGN","ALLOW_SIGN","isDelim","token","code","type","value","charCodeAt","skipSC","offset","getNextToken","checkInteger","valueOffset","disallowSign","length","consumeB","offset_","sign","module","exports","anPlusB","i"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/lexer/generic-an-plus-b.js"],"sourcesContent":["var isDigit = require('../tokenizer').isDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\n\nvar DELIM = TYPE.Delim;\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction skipSC(token, offset, getNextToken) {\n    while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {\n        token = getNextToken(++offset);\n    }\n\n    return offset;\n}\n\nfunction checkInteger(token, valueOffset, disallowSign, offset) {\n    if (!token) {\n        return 0;\n    }\n\n    var code = token.value.charCodeAt(valueOffset);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            // Number sign is not allowed\n            return 0;\n        }\n        valueOffset++;\n    }\n\n    for (; valueOffset < token.value.length; valueOffset++) {\n        if (!isDigit(token.value.charCodeAt(valueOffset))) {\n            // Integer is expected\n            return 0;\n        }\n    }\n\n    return offset + 1;\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB(token, offset_, getNextToken) {\n    var sign = false;\n    var offset = skipSC(token, offset_, getNextToken);\n\n    token = getNextToken(offset);\n\n    if (token === null) {\n        return offset_;\n    }\n\n    if (token.type !== NUMBER) {\n        if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {\n            sign = true;\n            offset = skipSC(getNextToken(++offset), offset, getNextToken);\n            token = getNextToken(offset);\n\n            if (token === null && token.type !== NUMBER) {\n                return 0;\n            }\n        } else {\n            return offset_;\n        }\n    }\n\n    if (!sign) {\n        var code = token.value.charCodeAt(0);\n        if (code !== PLUSSIGN && code !== HYPHENMINUS) {\n            // Number sign is expected\n            return 0;\n        }\n    }\n\n    return checkInteger(token, sign ? 0 : 1, sign, offset);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = function anPlusB(token, getNextToken) {\n    /* eslint-disable brace-style*/\n    var offset = 0;\n\n    if (!token) {\n        return 0;\n    }\n\n    // <integer>\n    if (token.type === NUMBER) {\n        return checkInteger(token, 0, ALLOW_SIGN, offset); // b\n    }\n\n    // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {\n        // expect 1st char is N\n        if (!cmpChar(token.value, 1, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // -n\n            // -n <signed-integer>\n            // -n ['+' | '-'] <signless-integer>\n            case 2:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // -n- <signless-integer>\n            case 3:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // <dashndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(2) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 3, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (token.type === IDENT || (isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT)) {\n        // just ignore a plus\n        if (token.type !== IDENT) {\n            token = getNextToken(++offset);\n        }\n\n        if (token === null || !cmpChar(token.value, 0, N)) {\n            return 0;\n        }\n\n        switch (token.value.length) {\n            // '+'? n\n            // '+'? n <signed-integer>\n            // '+'? n ['+' | '-'] <signless-integer>\n            case 1:\n                return consumeB(getNextToken(++offset), offset, getNextToken);\n\n            // '+'? n- <signless-integer>\n            case 2:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n\n            // '+'? <ndashdigit-ident>\n            default:\n                if (token.value.charCodeAt(1) !== HYPHENMINUS) {\n                    return 0;\n                }\n\n                return checkInteger(token, 2, DISALLOW_SIGN, offset);\n        }\n    }\n\n    // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (token.type === DIMENSION) {\n        var code = token.value.charCodeAt(0);\n        var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;\n\n        for (var i = sign; i < token.value.length; i++) {\n            if (!isDigit(token.value.charCodeAt(i))) {\n                break;\n            }\n        }\n\n        if (i === sign) {\n            // Integer is expected\n            return 0;\n        }\n\n        if (!cmpChar(token.value, i, N)) {\n            return 0;\n        }\n\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        if (i + 1 === token.value.length) {\n            return consumeB(getNextToken(++offset), offset, getNextToken);\n        } else {\n            if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {\n                return 0;\n            }\n\n            // <ndash-dimension> <signless-integer>\n            if (i + 2 === token.value.length) {\n                offset = skipSC(getNextToken(++offset), offset, getNextToken);\n                token = getNextToken(offset);\n\n                return checkInteger(token, 0, DISALLOW_SIGN, offset);\n            }\n            // <ndashdigit-dimension>\n            else {\n                return checkInteger(token, i + 2, DISALLOW_SIGN, offset);\n            }\n        }\n    }\n\n    return 0;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}