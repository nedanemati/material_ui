{"ast":null,"code":"var isHexDigit = require('../tokenizer').isHexDigit;\n\nvar cmpChar = require('../tokenizer').cmpChar;\n\nvar TYPE = require('../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar DELIM = TYPE.Delim;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\n\nvar U = 0x0075; // U+0075 LATIN SMALL LETTER U (u)\n\nfunction isDelim(token, code) {\n  return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction startsWith(token, code) {\n  return token.value.charCodeAt(0) === code;\n}\n\nfunction hexSequence(token, offset, allowDash) {\n  for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {\n    var code = token.value.charCodeAt(pos);\n\n    if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n      if (hexSequence(token, offset + hexlen + 1, false) > 0) {\n        return 6; // dissallow following question marks\n      }\n\n      return 0; // dash at the ending of a hex sequence is not allowed\n    }\n\n    if (!isHexDigit(code)) {\n      return 0; // not a hex digit\n    }\n\n    if (++hexlen > 6) {\n      return 0; // too many hex digits\n    }\n\n    ;\n  }\n\n  return hexlen;\n}\n\nfunction withQuestionMarkSequence(consumed, length, getNextToken) {\n  if (!consumed) {\n    return 0; // nothing consumed\n  }\n\n  while (isDelim(getNextToken(length), QUESTIONMARK)) {\n    if (++consumed > 6) {\n      return 0; // too many question marks\n    }\n\n    length++;\n  }\n\n  return length;\n} // https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\n\n\nmodule.exports = function urange(token, getNextToken) {\n  var length = 0; // should start with `u` or `U`\n\n  if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {\n    return 0;\n  }\n\n  token = getNextToken(++length);\n\n  if (token === null) {\n    return 0;\n  } // u '+' <ident-token> '?'*\n  // u '+' '?'+\n\n\n  if (isDelim(token, PLUSSIGN)) {\n    token = getNextToken(++length);\n\n    if (token === null) {\n      return 0;\n    }\n\n    if (token.type === IDENT) {\n      // u '+' <ident-token> '?'*\n      return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n    }\n\n    if (isDelim(token, QUESTIONMARK)) {\n      // u '+' '?'+\n      return withQuestionMarkSequence(1, ++length, getNextToken);\n    } // Hex digit or question mark is expected\n\n\n    return 0;\n  } // u <number-token> '?'*\n  // u <number-token> <dimension-token>\n  // u <number-token> <number-token>\n\n\n  if (token.type === NUMBER) {\n    if (!startsWith(token, PLUSSIGN)) {\n      return 0;\n    }\n\n    var consumedHexLength = hexSequence(token, 1, true);\n\n    if (consumedHexLength === 0) {\n      return 0;\n    }\n\n    token = getNextToken(++length);\n\n    if (token === null) {\n      // u <number-token> <eof>\n      return length;\n    }\n\n    if (token.type === DIMENSION || token.type === NUMBER) {\n      // u <number-token> <dimension-token>\n      // u <number-token> <number-token>\n      if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n        return 0;\n      }\n\n      return length + 1;\n    } // u <number-token> '?'*\n\n\n    return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n  } // u <dimension-token> '?'*\n\n\n  if (token.type === DIMENSION) {\n    if (!startsWith(token, PLUSSIGN)) {\n      return 0;\n    }\n\n    return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n  }\n\n  return 0;\n};","map":{"version":3,"names":["isHexDigit","require","cmpChar","TYPE","IDENT","Ident","DELIM","Delim","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","QUESTIONMARK","U","isDelim","token","code","type","value","charCodeAt","startsWith","hexSequence","offset","allowDash","pos","hexlen","length","withQuestionMarkSequence","consumed","getNextToken","module","exports","urange","consumedHexLength"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/lexer/generic-urange.js"],"sourcesContent":["var isHexDigit = require('../tokenizer').isHexDigit;\nvar cmpChar = require('../tokenizer').cmpChar;\nvar TYPE = require('../tokenizer').TYPE;\n\nvar IDENT = TYPE.Ident;\nvar DELIM = TYPE.Delim;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;     // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D;  // U+002D HYPHEN-MINUS (-)\nvar QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)\nvar U = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)\n\nfunction isDelim(token, code) {\n    return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;\n}\n\nfunction startsWith(token, code) {\n    return token.value.charCodeAt(0) === code;\n}\n\nfunction hexSequence(token, offset, allowDash) {\n    for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {\n        var code = token.value.charCodeAt(pos);\n\n        if (code === HYPHENMINUS && allowDash && hexlen !== 0) {\n            if (hexSequence(token, offset + hexlen + 1, false) > 0) {\n                return 6; // dissallow following question marks\n            }\n\n            return 0; // dash at the ending of a hex sequence is not allowed\n        }\n\n        if (!isHexDigit(code)) {\n            return 0; // not a hex digit\n        }\n\n        if (++hexlen > 6) {\n            return 0; // too many hex digits\n        };\n    }\n\n    return hexlen;\n}\n\nfunction withQuestionMarkSequence(consumed, length, getNextToken) {\n    if (!consumed) {\n        return 0; // nothing consumed\n    }\n\n    while (isDelim(getNextToken(length), QUESTIONMARK)) {\n        if (++consumed > 6) {\n            return 0; // too many question marks\n        }\n\n        length++;\n    }\n\n    return length;\n}\n\n// https://drafts.csswg.org/css-syntax/#urange\n// Informally, the <urange> production has three forms:\n// U+0001\n//      Defines a range consisting of a single code point, in this case the code point \"1\".\n// U+0001-00ff\n//      Defines a range of codepoints between the first and the second value, in this case\n//      the range between \"1\" and \"ff\" (255 in decimal) inclusive.\n// U+00??\n//      Defines a range of codepoints where the \"?\" characters range over all hex digits,\n//      in this case defining the same as the value U+0000-00ff.\n// In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat \"?\" as a hexadecimal digit).\n//\n// <urange> =\n//   u '+' <ident-token> '?'* |\n//   u <dimension-token> '?'* |\n//   u <number-token> '?'* |\n//   u <number-token> <dimension-token> |\n//   u <number-token> <number-token> |\n//   u '+' '?'+\nmodule.exports = function urange(token, getNextToken) {\n    var length = 0;\n\n    // should start with `u` or `U`\n    if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {\n        return 0;\n    }\n\n    token = getNextToken(++length);\n    if (token === null) {\n        return 0;\n    }\n\n    // u '+' <ident-token> '?'*\n    // u '+' '?'+\n    if (isDelim(token, PLUSSIGN)) {\n        token = getNextToken(++length);\n        if (token === null) {\n            return 0;\n        }\n\n        if (token.type === IDENT) {\n            // u '+' <ident-token> '?'*\n            return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);\n        }\n\n        if (isDelim(token, QUESTIONMARK)) {\n            // u '+' '?'+\n            return withQuestionMarkSequence(1, ++length, getNextToken);\n        }\n\n        // Hex digit or question mark is expected\n        return 0;\n    }\n\n    // u <number-token> '?'*\n    // u <number-token> <dimension-token>\n    // u <number-token> <number-token>\n    if (token.type === NUMBER) {\n        if (!startsWith(token, PLUSSIGN)) {\n            return 0;\n        }\n\n        var consumedHexLength = hexSequence(token, 1, true);\n        if (consumedHexLength === 0) {\n            return 0;\n        }\n\n        token = getNextToken(++length);\n        if (token === null) {\n            // u <number-token> <eof>\n            return length;\n        }\n\n        if (token.type === DIMENSION || token.type === NUMBER) {\n            // u <number-token> <dimension-token>\n            // u <number-token> <number-token>\n            if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {\n                return 0;\n            }\n\n            return length + 1;\n        }\n\n        // u <number-token> '?'*\n        return withQuestionMarkSequence(consumedHexLength, length, getNextToken);\n    }\n\n    // u <dimension-token> '?'*\n    if (token.type === DIMENSION) {\n        if (!startsWith(token, PLUSSIGN)) {\n            return 0;\n        }\n\n        return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);\n    }\n\n    return 0;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}