{"ast":null,"code":"var SyntaxReferenceError = require('./error').SyntaxReferenceError;\n\nvar MatchError = require('./error').MatchError;\n\nvar names = require('../utils/names');\n\nvar generic = require('./generic');\n\nvar parse = require('../definition-syntax/parse');\n\nvar generate = require('../definition-syntax/generate');\n\nvar walk = require('../definition-syntax/walk');\n\nvar prepareTokens = require('./prepare-tokens');\n\nvar buildMatchGraph = require('./match-graph').buildMatchGraph;\n\nvar matchAsTree = require('./match').matchAsTree;\n\nvar trace = require('./trace');\n\nvar search = require('./search');\n\nvar getStructureFromConfig = require('./structure').getStructureFromConfig;\n\nvar cssWideKeywords = buildMatchGraph('inherit | initial | unset');\nvar cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n  var result = {};\n\n  for (var name in map) {\n    if (map[name].syntax) {\n      result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, {\n        compact: compact\n      });\n    }\n  }\n\n  return result;\n}\n\nfunction valueHasVar(tokens) {\n  for (var i = 0; i < tokens.length; i++) {\n    if (tokens[i].value.toLowerCase() === 'var(') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction buildMatchResult(match, error, iterations) {\n  return {\n    matched: match,\n    iterations: iterations,\n    error: error,\n    getTrace: trace.getTrace,\n    isType: trace.isType,\n    isProperty: trace.isProperty,\n    isKeyword: trace.isKeyword\n  };\n}\n\nfunction matchSyntax(lexer, syntax, value, useCommon) {\n  var tokens = prepareTokens(value, lexer.syntax);\n  var result;\n\n  if (valueHasVar(tokens)) {\n    return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n  }\n\n  if (useCommon) {\n    result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n  }\n\n  if (!useCommon || !result.match) {\n    result = matchAsTree(tokens, syntax.match, lexer);\n\n    if (!result.match) {\n      return buildMatchResult(null, new MatchError(result.reason, syntax.syntax, value, result), result.iterations);\n    }\n  }\n\n  return buildMatchResult(result.match, null, result.iterations);\n}\n\nvar Lexer = function (config, syntax, structure) {\n  this.valueCommonSyntax = cssWideKeywords;\n  this.syntax = syntax;\n  this.generic = false;\n  this.properties = {};\n  this.types = {};\n  this.structure = structure || getStructureFromConfig(config);\n\n  if (config) {\n    if (config.types) {\n      for (var name in config.types) {\n        this.addType_(name, config.types[name]);\n      }\n    }\n\n    if (config.generic) {\n      this.generic = true;\n\n      for (var name in generic) {\n        this.addType_(name, generic[name]);\n      }\n    }\n\n    if (config.properties) {\n      for (var name in config.properties) {\n        this.addProperty_(name, config.properties[name]);\n      }\n    }\n  }\n};\n\nLexer.prototype = {\n  structure: {},\n  checkStructure: function (ast) {\n    function collectWarning(node, message) {\n      warns.push({\n        node: node,\n        message: message\n      });\n    }\n\n    var structure = this.structure;\n    var warns = [];\n    this.syntax.walk(ast, function (node) {\n      if (structure.hasOwnProperty(node.type)) {\n        structure[node.type].check(node, collectWarning);\n      } else {\n        collectWarning(node, 'Unknown node type `' + node.type + '`');\n      }\n    });\n    return warns.length ? warns : false;\n  },\n  createDescriptor: function (syntax, type, name) {\n    var ref = {\n      type: type,\n      name: name\n    };\n    var descriptor = {\n      type: type,\n      name: name,\n      syntax: null,\n      match: null\n    };\n\n    if (typeof syntax === 'function') {\n      descriptor.match = buildMatchGraph(syntax, ref);\n    } else {\n      if (typeof syntax === 'string') {\n        // lazy parsing on first access\n        Object.defineProperty(descriptor, 'syntax', {\n          get: function () {\n            Object.defineProperty(descriptor, 'syntax', {\n              value: parse(syntax)\n            });\n            return descriptor.syntax;\n          }\n        });\n      } else {\n        descriptor.syntax = syntax;\n      } // lazy graph build on first access\n\n\n      Object.defineProperty(descriptor, 'match', {\n        get: function () {\n          Object.defineProperty(descriptor, 'match', {\n            value: buildMatchGraph(descriptor.syntax, ref)\n          });\n          return descriptor.match;\n        }\n      });\n    }\n\n    return descriptor;\n  },\n  addProperty_: function (name, syntax) {\n    this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n  },\n  addType_: function (name, syntax) {\n    this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n    if (syntax === generic['-ms-legacy-expression']) {\n      this.valueCommonSyntax = cssWideKeywordsWithExpression;\n    }\n  },\n  matchDeclaration: function (node) {\n    if (node.type !== 'Declaration') {\n      return buildMatchResult(null, new Error('Not a Declaration node'));\n    }\n\n    return this.matchProperty(node.property, node.value);\n  },\n  matchProperty: function (propertyName, value) {\n    var property = names.property(propertyName); // don't match syntax for a custom property\n\n    if (property.custom) {\n      return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n    }\n\n    var propertySyntax = property.vendor ? this.getProperty(property.name) || this.getProperty(property.basename) : this.getProperty(property.name);\n\n    if (!propertySyntax) {\n      return buildMatchResult(null, new SyntaxReferenceError('Unknown property', propertyName));\n    }\n\n    return matchSyntax(this, propertySyntax, value, true);\n  },\n  matchType: function (typeName, value) {\n    var typeSyntax = this.getType(typeName);\n\n    if (!typeSyntax) {\n      return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n    }\n\n    return matchSyntax(this, typeSyntax, value, false);\n  },\n  match: function (syntax, value) {\n    if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n      return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n    }\n\n    if (typeof syntax === 'string' || !syntax.match) {\n      syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n    }\n\n    return matchSyntax(this, syntax, value, false);\n  },\n  findValueFragments: function (propertyName, value, type, name) {\n    return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n  },\n  findDeclarationValueFragments: function (declaration, type, name) {\n    return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n  },\n  findAllFragments: function (ast, type, name) {\n    var result = [];\n    this.syntax.walk(ast, {\n      visit: 'Declaration',\n      enter: function (declaration) {\n        result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n      }.bind(this)\n    });\n    return result;\n  },\n  getProperty: function (name) {\n    return this.properties.hasOwnProperty(name) ? this.properties[name] : null;\n  },\n  getType: function (name) {\n    return this.types.hasOwnProperty(name) ? this.types[name] : null;\n  },\n  validate: function () {\n    function validate(syntax, name, broken, descriptor) {\n      if (broken.hasOwnProperty(name)) {\n        return broken[name];\n      }\n\n      broken[name] = false;\n\n      if (descriptor.syntax !== null) {\n        walk(descriptor.syntax, function (node) {\n          if (node.type !== 'Type' && node.type !== 'Property') {\n            return;\n          }\n\n          var map = node.type === 'Type' ? syntax.types : syntax.properties;\n          var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n          if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n            broken[name] = true;\n          }\n        }, this);\n      }\n    }\n\n    var brokenTypes = {};\n    var brokenProperties = {};\n\n    for (var key in this.types) {\n      validate(this, key, brokenTypes, this.types[key]);\n    }\n\n    for (var key in this.properties) {\n      validate(this, key, brokenProperties, this.properties[key]);\n    }\n\n    brokenTypes = Object.keys(brokenTypes).filter(function (name) {\n      return brokenTypes[name];\n    });\n    brokenProperties = Object.keys(brokenProperties).filter(function (name) {\n      return brokenProperties[name];\n    });\n\n    if (brokenTypes.length || brokenProperties.length) {\n      return {\n        types: brokenTypes,\n        properties: brokenProperties\n      };\n    }\n\n    return null;\n  },\n  dump: function (syntaxAsAst, pretty) {\n    return {\n      generic: this.generic,\n      types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n      properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst)\n    };\n  },\n  toString: function () {\n    return JSON.stringify(this.dump());\n  }\n};\nmodule.exports = Lexer;","map":{"version":3,"names":["SyntaxReferenceError","require","MatchError","names","generic","parse","generate","walk","prepareTokens","buildMatchGraph","matchAsTree","trace","search","getStructureFromConfig","cssWideKeywords","cssWideKeywordsWithExpression","dumpMapSyntax","map","compact","syntaxAsAst","result","name","syntax","valueHasVar","tokens","i","length","value","toLowerCase","buildMatchResult","match","error","iterations","matched","getTrace","isType","isProperty","isKeyword","matchSyntax","lexer","useCommon","Error","valueCommonSyntax","reason","Lexer","config","structure","properties","types","addType_","addProperty_","prototype","checkStructure","ast","collectWarning","node","message","warns","push","hasOwnProperty","type","check","createDescriptor","ref","descriptor","Object","defineProperty","get","matchDeclaration","matchProperty","property","propertyName","custom","propertySyntax","vendor","getProperty","basename","matchType","typeName","typeSyntax","getType","findValueFragments","matchFragments","findDeclarationValueFragments","declaration","findAllFragments","visit","enter","apply","bind","validate","broken","brokenMap","brokenTypes","brokenProperties","key","keys","filter","dump","pretty","toString","JSON","stringify","module","exports"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/lexer/Lexer.js"],"sourcesContent":["var SyntaxReferenceError = require('./error').SyntaxReferenceError;\nvar MatchError = require('./error').MatchError;\nvar names = require('../utils/names');\nvar generic = require('./generic');\nvar parse = require('../definition-syntax/parse');\nvar generate = require('../definition-syntax/generate');\nvar walk = require('../definition-syntax/walk');\nvar prepareTokens = require('./prepare-tokens');\nvar buildMatchGraph = require('./match-graph').buildMatchGraph;\nvar matchAsTree = require('./match').matchAsTree;\nvar trace = require('./trace');\nvar search = require('./search');\nvar getStructureFromConfig = require('./structure').getStructureFromConfig;\nvar cssWideKeywords = buildMatchGraph('inherit | initial | unset');\nvar cssWideKeywordsWithExpression = buildMatchGraph('inherit | initial | unset | <-ms-legacy-expression>');\n\nfunction dumpMapSyntax(map, compact, syntaxAsAst) {\n    var result = {};\n\n    for (var name in map) {\n        if (map[name].syntax) {\n            result[name] = syntaxAsAst\n                ? map[name].syntax\n                : generate(map[name].syntax, { compact: compact });\n        }\n    }\n\n    return result;\n}\n\nfunction valueHasVar(tokens) {\n    for (var i = 0; i < tokens.length; i++) {\n        if (tokens[i].value.toLowerCase() === 'var(') {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction buildMatchResult(match, error, iterations) {\n    return {\n        matched: match,\n        iterations: iterations,\n        error: error,\n        getTrace: trace.getTrace,\n        isType: trace.isType,\n        isProperty: trace.isProperty,\n        isKeyword: trace.isKeyword\n    };\n}\n\nfunction matchSyntax(lexer, syntax, value, useCommon) {\n    var tokens = prepareTokens(value, lexer.syntax);\n    var result;\n\n    if (valueHasVar(tokens)) {\n        return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));\n    }\n\n    if (useCommon) {\n        result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);\n    }\n\n    if (!useCommon || !result.match) {\n        result = matchAsTree(tokens, syntax.match, lexer);\n        if (!result.match) {\n            return buildMatchResult(\n                null,\n                new MatchError(result.reason, syntax.syntax, value, result),\n                result.iterations\n            );\n        }\n    }\n\n    return buildMatchResult(result.match, null, result.iterations);\n}\n\nvar Lexer = function(config, syntax, structure) {\n    this.valueCommonSyntax = cssWideKeywords;\n    this.syntax = syntax;\n    this.generic = false;\n    this.properties = {};\n    this.types = {};\n    this.structure = structure || getStructureFromConfig(config);\n\n    if (config) {\n        if (config.types) {\n            for (var name in config.types) {\n                this.addType_(name, config.types[name]);\n            }\n        }\n\n        if (config.generic) {\n            this.generic = true;\n            for (var name in generic) {\n                this.addType_(name, generic[name]);\n            }\n        }\n\n        if (config.properties) {\n            for (var name in config.properties) {\n                this.addProperty_(name, config.properties[name]);\n            }\n        }\n    }\n};\n\nLexer.prototype = {\n    structure: {},\n    checkStructure: function(ast) {\n        function collectWarning(node, message) {\n            warns.push({\n                node: node,\n                message: message\n            });\n        }\n\n        var structure = this.structure;\n        var warns = [];\n\n        this.syntax.walk(ast, function(node) {\n            if (structure.hasOwnProperty(node.type)) {\n                structure[node.type].check(node, collectWarning);\n            } else {\n                collectWarning(node, 'Unknown node type `' + node.type + '`');\n            }\n        });\n\n        return warns.length ? warns : false;\n    },\n\n    createDescriptor: function(syntax, type, name) {\n        var ref = {\n            type: type,\n            name: name\n        };\n        var descriptor = {\n            type: type,\n            name: name,\n            syntax: null,\n            match: null\n        };\n\n        if (typeof syntax === 'function') {\n            descriptor.match = buildMatchGraph(syntax, ref);\n        } else {\n            if (typeof syntax === 'string') {\n                // lazy parsing on first access\n                Object.defineProperty(descriptor, 'syntax', {\n                    get: function() {\n                        Object.defineProperty(descriptor, 'syntax', {\n                            value: parse(syntax)\n                        });\n\n                        return descriptor.syntax;\n                    }\n                });\n            } else {\n                descriptor.syntax = syntax;\n            }\n\n            // lazy graph build on first access\n            Object.defineProperty(descriptor, 'match', {\n                get: function() {\n                    Object.defineProperty(descriptor, 'match', {\n                        value: buildMatchGraph(descriptor.syntax, ref)\n                    });\n\n                    return descriptor.match;\n                }\n            });\n        }\n\n        return descriptor;\n    },\n    addProperty_: function(name, syntax) {\n        this.properties[name] = this.createDescriptor(syntax, 'Property', name);\n    },\n    addType_: function(name, syntax) {\n        this.types[name] = this.createDescriptor(syntax, 'Type', name);\n\n        if (syntax === generic['-ms-legacy-expression']) {\n            this.valueCommonSyntax = cssWideKeywordsWithExpression;\n        }\n    },\n\n    matchDeclaration: function(node) {\n        if (node.type !== 'Declaration') {\n            return buildMatchResult(null, new Error('Not a Declaration node'));\n        }\n\n        return this.matchProperty(node.property, node.value);\n    },\n    matchProperty: function(propertyName, value) {\n        var property = names.property(propertyName);\n\n        // don't match syntax for a custom property\n        if (property.custom) {\n            return buildMatchResult(null, new Error('Lexer matching doesn\\'t applicable for custom properties'));\n        }\n\n        var propertySyntax = property.vendor\n            ? this.getProperty(property.name) || this.getProperty(property.basename)\n            : this.getProperty(property.name);\n\n        if (!propertySyntax) {\n            return buildMatchResult(null, new SyntaxReferenceError('Unknown property', propertyName));\n        }\n\n        return matchSyntax(this, propertySyntax, value, true);\n    },\n    matchType: function(typeName, value) {\n        var typeSyntax = this.getType(typeName);\n\n        if (!typeSyntax) {\n            return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));\n        }\n\n        return matchSyntax(this, typeSyntax, value, false);\n    },\n    match: function(syntax, value) {\n        if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {\n            return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));\n        }\n\n        if (typeof syntax === 'string' || !syntax.match) {\n            syntax = this.createDescriptor(syntax, 'Type', 'anonymous');\n        }\n\n        return matchSyntax(this, syntax, value, false);\n    },\n\n    findValueFragments: function(propertyName, value, type, name) {\n        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);\n    },\n    findDeclarationValueFragments: function(declaration, type, name) {\n        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);\n    },\n    findAllFragments: function(ast, type, name) {\n        var result = [];\n\n        this.syntax.walk(ast, {\n            visit: 'Declaration',\n            enter: function(declaration) {\n                result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));\n            }.bind(this)\n        });\n\n        return result;\n    },\n\n    getProperty: function(name) {\n        return this.properties.hasOwnProperty(name) ? this.properties[name] : null;\n    },\n    getType: function(name) {\n        return this.types.hasOwnProperty(name) ? this.types[name] : null;\n    },\n\n    validate: function() {\n        function validate(syntax, name, broken, descriptor) {\n            if (broken.hasOwnProperty(name)) {\n                return broken[name];\n            }\n\n            broken[name] = false;\n            if (descriptor.syntax !== null) {\n                walk(descriptor.syntax, function(node) {\n                    if (node.type !== 'Type' && node.type !== 'Property') {\n                        return;\n                    }\n\n                    var map = node.type === 'Type' ? syntax.types : syntax.properties;\n                    var brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;\n\n                    if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {\n                        broken[name] = true;\n                    }\n                }, this);\n            }\n        }\n\n        var brokenTypes = {};\n        var brokenProperties = {};\n\n        for (var key in this.types) {\n            validate(this, key, brokenTypes, this.types[key]);\n        }\n\n        for (var key in this.properties) {\n            validate(this, key, brokenProperties, this.properties[key]);\n        }\n\n        brokenTypes = Object.keys(brokenTypes).filter(function(name) {\n            return brokenTypes[name];\n        });\n        brokenProperties = Object.keys(brokenProperties).filter(function(name) {\n            return brokenProperties[name];\n        });\n\n        if (brokenTypes.length || brokenProperties.length) {\n            return {\n                types: brokenTypes,\n                properties: brokenProperties\n            };\n        }\n\n        return null;\n    },\n    dump: function(syntaxAsAst, pretty) {\n        return {\n            generic: this.generic,\n            types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),\n            properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst)\n        };\n    },\n    toString: function() {\n        return JSON.stringify(this.dump());\n    }\n};\n\nmodule.exports = Lexer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}