{"ast":null,"code":"var TokenStream = require('../common/TokenStream');\n\nvar adoptBuffer = require('../common/adopt-buffer');\n\nvar constants = require('./const');\n\nvar TYPE = constants.TYPE;\n\nvar charCodeDefinitions = require('./char-code-definitions');\n\nvar isNewline = charCodeDefinitions.isNewline;\nvar isName = charCodeDefinitions.isName;\nvar isValidEscape = charCodeDefinitions.isValidEscape;\nvar isNumberStart = charCodeDefinitions.isNumberStart;\nvar isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nvar charCodeCategory = charCodeDefinitions.charCodeCategory;\nvar isBOM = charCodeDefinitions.isBOM;\n\nvar utils = require('./utils');\n\nvar cmpStr = utils.cmpStr;\nvar getNewlineLength = utils.getNewlineLength;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar consumeEscaped = utils.consumeEscaped;\nvar consumeName = utils.consumeName;\nvar consumeNumber = utils.consumeNumber;\nvar consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\n\nfunction tokenize(source, stream) {\n  function getCharCode(offset) {\n    return offset < sourceLength ? source.charCodeAt(offset) : 0;\n  } // § 4.3.3. Consume a numeric token\n\n\n  function consumeNumericToken() {\n    // Consume a number and let number be the result.\n    offset = consumeNumber(source, offset); // If the next 3 input code points would start an identifier, then:\n\n    if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n      // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n      // Consume a name. Set the <dimension-token>’s unit to the returned value.\n      // Return the <dimension-token>.\n      type = TYPE.Dimension;\n      offset = consumeName(source, offset);\n      return;\n    } // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n\n\n    if (getCharCode(offset) === 0x0025) {\n      // Create a <percentage-token> with the same value as number, and return it.\n      type = TYPE.Percentage;\n      offset++;\n      return;\n    } // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n\n\n    type = TYPE.Number;\n  } // § 4.3.4. Consume an ident-like token\n\n\n  function consumeIdentLikeToken() {\n    const nameStartOffset = offset; // Consume a name, and let string be the result.\n\n    offset = consumeName(source, offset); // If string’s value is an ASCII case-insensitive match for \"url\",\n    // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n\n    if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n      // While the next two input code points are whitespace, consume the next input code point.\n      offset = findWhiteSpaceEnd(source, offset + 1); // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n      // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n      // then create a <function-token> with its value set to string and return it.\n\n      if (getCharCode(offset) === 0x0022 || getCharCode(offset) === 0x0027) {\n        type = TYPE.Function;\n        offset = nameStartOffset + 4;\n        return;\n      } // Otherwise, consume a url token, and return it.\n\n\n      consumeUrlToken();\n      return;\n    } // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n    // Create a <function-token> with its value set to string and return it.\n\n\n    if (getCharCode(offset) === 0x0028) {\n      type = TYPE.Function;\n      offset++;\n      return;\n    } // Otherwise, create an <ident-token> with its value set to string and return it.\n\n\n    type = TYPE.Ident;\n  } // § 4.3.5. Consume a string token\n\n\n  function consumeStringToken(endingCodePoint) {\n    // This algorithm may be called with an ending code point, which denotes the code point\n    // that ends the string. If an ending code point is not specified,\n    // the current input code point is used.\n    if (!endingCodePoint) {\n      endingCodePoint = getCharCode(offset++);\n    } // Initially create a <string-token> with its value set to the empty string.\n\n\n    type = TYPE.String; // Repeatedly consume the next input code point from the stream:\n\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      switch (charCodeCategory(code)) {\n        // ending code point\n        case endingCodePoint:\n          // Return the <string-token>.\n          offset++;\n          return;\n        // EOF\n\n        case charCodeCategory.Eof:\n          // This is a parse error. Return the <string-token>.\n          return;\n        // newline\n\n        case charCodeCategory.WhiteSpace:\n          if (isNewline(code)) {\n            // This is a parse error. Reconsume the current input code point,\n            // create a <bad-string-token>, and return it.\n            offset += getNewlineLength(source, offset, code);\n            type = TYPE.BadString;\n            return;\n          }\n\n          break;\n        // U+005C REVERSE SOLIDUS (\\)\n\n        case 0x005C:\n          // If the next input code point is EOF, do nothing.\n          if (offset === source.length - 1) {\n            break;\n          }\n\n          var nextCode = getCharCode(offset + 1); // Otherwise, if the next input code point is a newline, consume it.\n\n          if (isNewline(nextCode)) {\n            offset += getNewlineLength(source, offset + 1, nextCode);\n          } else if (isValidEscape(code, nextCode)) {\n            // Otherwise, (the stream starts with a valid escape) consume\n            // an escaped code point and append the returned code point to\n            // the <string-token>’s value.\n            offset = consumeEscaped(source, offset) - 1;\n          }\n\n          break;\n        // anything else\n        // Append the current input code point to the <string-token>’s value.\n      }\n    }\n  } // § 4.3.6. Consume a url token\n  // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n  // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n  // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n  // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n\n\n  function consumeUrlToken() {\n    // Initially create a <url-token> with its value set to the empty string.\n    type = TYPE.Url; // Consume as much whitespace as possible.\n\n    offset = findWhiteSpaceEnd(source, offset); // Repeatedly consume the next input code point from the stream:\n\n    for (; offset < source.length; offset++) {\n      var code = source.charCodeAt(offset);\n\n      switch (charCodeCategory(code)) {\n        // U+0029 RIGHT PARENTHESIS ())\n        case 0x0029:\n          // Return the <url-token>.\n          offset++;\n          return;\n        // EOF\n\n        case charCodeCategory.Eof:\n          // This is a parse error. Return the <url-token>.\n          return;\n        // whitespace\n\n        case charCodeCategory.WhiteSpace:\n          // Consume as much whitespace as possible.\n          offset = findWhiteSpaceEnd(source, offset); // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n          // consume it and return the <url-token>\n          // (if EOF was encountered, this is a parse error);\n\n          if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n            if (offset < source.length) {\n              offset++;\n            }\n\n            return;\n          } // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n          // and return it.\n\n\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n        // U+0022 QUOTATION MARK (\")\n        // U+0027 APOSTROPHE (')\n        // U+0028 LEFT PARENTHESIS (()\n        // non-printable code point\n\n        case 0x0022:\n        case 0x0027:\n        case 0x0028:\n        case charCodeCategory.NonPrintable:\n          // This is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n        // U+005C REVERSE SOLIDUS (\\)\n\n        case 0x005C:\n          // If the stream starts with a valid escape, consume an escaped code point and\n          // append the returned code point to the <url-token>’s value.\n          if (isValidEscape(code, getCharCode(offset + 1))) {\n            offset = consumeEscaped(source, offset) - 1;\n            break;\n          } // Otherwise, this is a parse error. Consume the remnants of a bad url,\n          // create a <bad-url-token>, and return it.\n\n\n          offset = consumeBadUrlRemnants(source, offset);\n          type = TYPE.BadUrl;\n          return;\n        // anything else\n        // Append the current input code point to the <url-token>’s value.\n      }\n    }\n  }\n\n  if (!stream) {\n    stream = new TokenStream();\n  } // ensure source is a string\n\n\n  source = String(source || '');\n  var sourceLength = source.length;\n  var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n\n  var balance = adoptBuffer(stream.balance, sourceLength + 1);\n  var tokenCount = 0;\n  var start = isBOM(getCharCode(0));\n  var offset = start;\n  var balanceCloseType = 0;\n  var balanceStart = 0;\n  var balancePrev = 0; // https://drafts.csswg.org/css-syntax-3/#consume-token\n  // § 4.3.1. Consume a token\n\n  while (offset < sourceLength) {\n    var code = source.charCodeAt(offset);\n    var type = 0;\n    balance[tokenCount] = sourceLength;\n\n    switch (charCodeCategory(code)) {\n      // whitespace\n      case charCodeCategory.WhiteSpace:\n        // Consume as much whitespace as possible. Return a <whitespace-token>.\n        type = TYPE.WhiteSpace;\n        offset = findWhiteSpaceEnd(source, offset + 1);\n        break;\n      // U+0022 QUOTATION MARK (\")\n\n      case 0x0022:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n      // U+0023 NUMBER SIGN (#)\n\n      case 0x0023:\n        // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n        if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // Create a <hash-token>.\n          type = TYPE.Hash; // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n          // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          //     // TODO: set id flag\n          // }\n          // Consume a name, and set the <hash-token>’s value to the returned string.\n\n          offset = consumeName(source, offset + 1); // Return the <hash-token>.\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+0027 APOSTROPHE (')\n\n      case 0x0027:\n        // Consume a string token and return it.\n        consumeStringToken();\n        break;\n      // U+0028 LEFT PARENTHESIS (()\n\n      case 0x0028:\n        // Return a <(-token>.\n        type = TYPE.LeftParenthesis;\n        offset++;\n        break;\n      // U+0029 RIGHT PARENTHESIS ())\n\n      case 0x0029:\n        // Return a <)-token>.\n        type = TYPE.RightParenthesis;\n        offset++;\n        break;\n      // U+002B PLUS SIGN (+)\n\n      case 0x002B:\n        // If the input stream starts with a number, ...\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+002C COMMA (,)\n\n      case 0x002C:\n        // Return a <comma-token>.\n        type = TYPE.Comma;\n        offset++;\n        break;\n      // U+002D HYPHEN-MINUS (-)\n\n      case 0x002D:\n        // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          consumeNumericToken();\n        } else {\n          // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n          if (getCharCode(offset + 1) === 0x002D && getCharCode(offset + 2) === 0x003E) {\n            type = TYPE.CDC;\n            offset = offset + 3;\n          } else {\n            // Otherwise, if the input stream starts with an identifier, ...\n            if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n              // ... reconsume the current input code point, consume an ident-like token, and return it.\n              consumeIdentLikeToken();\n            } else {\n              // Otherwise, return a <delim-token> with its value set to the current input code point.\n              type = TYPE.Delim;\n              offset++;\n            }\n          }\n        }\n\n        break;\n      // U+002E FULL STOP (.)\n\n      case 0x002E:\n        // If the input stream starts with a number, ...\n        if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n          // ... reconsume the current input code point, consume a numeric token, and return it.\n          consumeNumericToken();\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+002F SOLIDUS (/)\n\n      case 0x002F:\n        // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n        if (getCharCode(offset + 1) === 0x002A) {\n          // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n          // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n          type = TYPE.Comment;\n          offset = source.indexOf('*/', offset + 2) + 2;\n\n          if (offset === 1) {\n            offset = source.length;\n          }\n        } else {\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+003A COLON (:)\n\n      case 0x003A:\n        // Return a <colon-token>.\n        type = TYPE.Colon;\n        offset++;\n        break;\n      // U+003B SEMICOLON (;)\n\n      case 0x003B:\n        // Return a <semicolon-token>.\n        type = TYPE.Semicolon;\n        offset++;\n        break;\n      // U+003C LESS-THAN SIGN (<)\n\n      case 0x003C:\n        // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n        if (getCharCode(offset + 1) === 0x0021 && getCharCode(offset + 2) === 0x002D && getCharCode(offset + 3) === 0x002D) {\n          // ... consume them and return a <CDO-token>.\n          type = TYPE.CDO;\n          offset = offset + 4;\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+0040 COMMERCIAL AT (@)\n\n      case 0x0040:\n        // If the next 3 input code points would start an identifier, ...\n        if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n          // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n          type = TYPE.AtKeyword;\n          offset = consumeName(source, offset + 1);\n        } else {\n          // Otherwise, return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+005B LEFT SQUARE BRACKET ([)\n\n      case 0x005B:\n        // Return a <[-token>.\n        type = TYPE.LeftSquareBracket;\n        offset++;\n        break;\n      // U+005C REVERSE SOLIDUS (\\)\n\n      case 0x005C:\n        // If the input stream starts with a valid escape, ...\n        if (isValidEscape(code, getCharCode(offset + 1))) {\n          // ... reconsume the current input code point, consume an ident-like token, and return it.\n          consumeIdentLikeToken();\n        } else {\n          // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n          type = TYPE.Delim;\n          offset++;\n        }\n\n        break;\n      // U+005D RIGHT SQUARE BRACKET (])\n\n      case 0x005D:\n        // Return a <]-token>.\n        type = TYPE.RightSquareBracket;\n        offset++;\n        break;\n      // U+007B LEFT CURLY BRACKET ({)\n\n      case 0x007B:\n        // Return a <{-token>.\n        type = TYPE.LeftCurlyBracket;\n        offset++;\n        break;\n      // U+007D RIGHT CURLY BRACKET (})\n\n      case 0x007D:\n        // Return a <}-token>.\n        type = TYPE.RightCurlyBracket;\n        offset++;\n        break;\n      // digit\n\n      case charCodeCategory.Digit:\n        // Reconsume the current input code point, consume a numeric token, and return it.\n        consumeNumericToken();\n        break;\n      // name-start code point\n\n      case charCodeCategory.NameStart:\n        // Reconsume the current input code point, consume an ident-like token, and return it.\n        consumeIdentLikeToken();\n        break;\n      // EOF\n\n      case charCodeCategory.Eof:\n        // Return an <EOF-token>.\n        break;\n      // anything else\n\n      default:\n        // Return a <delim-token> with its value set to the current input code point.\n        type = TYPE.Delim;\n        offset++;\n    }\n\n    switch (type) {\n      case balanceCloseType:\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balanceCloseType = balanceStart >> TYPE_SHIFT;\n        balance[tokenCount] = balancePrev;\n        balance[balancePrev++] = tokenCount;\n\n        for (; balancePrev < tokenCount; balancePrev++) {\n          if (balance[balancePrev] === sourceLength) {\n            balance[balancePrev] = tokenCount;\n          }\n        }\n\n        break;\n\n      case TYPE.LeftParenthesis:\n      case TYPE.Function:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightParenthesis;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n\n      case TYPE.LeftSquareBracket:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightSquareBracket;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n\n      case TYPE.LeftCurlyBracket:\n        balance[tokenCount] = balanceStart;\n        balanceCloseType = TYPE.RightCurlyBracket;\n        balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;\n        break;\n    }\n\n    offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;\n  } // finalize buffers\n\n\n  offsetAndType[tokenCount] = TYPE.EOF << TYPE_SHIFT | offset; // <EOF-token>\n\n  balance[tokenCount] = sourceLength;\n  balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n\n  while (balanceStart !== 0) {\n    balancePrev = balanceStart & OFFSET_MASK;\n    balanceStart = balance[balancePrev];\n    balance[balancePrev] = sourceLength;\n  } // update stream\n\n\n  stream.source = source;\n  stream.firstCharOffset = start;\n  stream.offsetAndType = offsetAndType;\n  stream.tokenCount = tokenCount;\n  stream.balance = balance;\n  stream.reset();\n  stream.next();\n  return stream;\n} // extend tokenizer with constants\n\n\nObject.keys(constants).forEach(function (key) {\n  tokenize[key] = constants[key];\n}); // extend tokenizer with static methods from utils\n\nObject.keys(charCodeDefinitions).forEach(function (key) {\n  tokenize[key] = charCodeDefinitions[key];\n});\nObject.keys(utils).forEach(function (key) {\n  tokenize[key] = utils[key];\n});\nmodule.exports = tokenize;","map":{"version":3,"names":["TokenStream","require","adoptBuffer","constants","TYPE","charCodeDefinitions","isNewline","isName","isValidEscape","isNumberStart","isIdentifierStart","charCodeCategory","isBOM","utils","cmpStr","getNewlineLength","findWhiteSpaceEnd","consumeEscaped","consumeName","consumeNumber","consumeBadUrlRemnants","OFFSET_MASK","TYPE_SHIFT","tokenize","source","stream","getCharCode","offset","sourceLength","charCodeAt","consumeNumericToken","type","Dimension","Percentage","Number","consumeIdentLikeToken","nameStartOffset","Function","consumeUrlToken","Ident","consumeStringToken","endingCodePoint","String","length","code","Eof","WhiteSpace","BadString","nextCode","Url","BadUrl","NonPrintable","offsetAndType","balance","tokenCount","start","balanceCloseType","balanceStart","balancePrev","Hash","Delim","LeftParenthesis","RightParenthesis","Comma","CDC","Comment","indexOf","Colon","Semicolon","CDO","AtKeyword","LeftSquareBracket","RightSquareBracket","LeftCurlyBracket","RightCurlyBracket","Digit","NameStart","EOF","firstCharOffset","reset","next","Object","keys","forEach","key","module","exports"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/tokenizer/index.js"],"sourcesContent":["var TokenStream = require('../common/TokenStream');\nvar adoptBuffer = require('../common/adopt-buffer');\n\nvar constants = require('./const');\nvar TYPE = constants.TYPE;\n\nvar charCodeDefinitions = require('./char-code-definitions');\nvar isNewline = charCodeDefinitions.isNewline;\nvar isName = charCodeDefinitions.isName;\nvar isValidEscape = charCodeDefinitions.isValidEscape;\nvar isNumberStart = charCodeDefinitions.isNumberStart;\nvar isIdentifierStart = charCodeDefinitions.isIdentifierStart;\nvar charCodeCategory = charCodeDefinitions.charCodeCategory;\nvar isBOM = charCodeDefinitions.isBOM;\n\nvar utils = require('./utils');\nvar cmpStr = utils.cmpStr;\nvar getNewlineLength = utils.getNewlineLength;\nvar findWhiteSpaceEnd = utils.findWhiteSpaceEnd;\nvar consumeEscaped = utils.consumeEscaped;\nvar consumeName = utils.consumeName;\nvar consumeNumber = utils.consumeNumber;\nvar consumeBadUrlRemnants = utils.consumeBadUrlRemnants;\n\nvar OFFSET_MASK = 0x00FFFFFF;\nvar TYPE_SHIFT = 24;\n\nfunction tokenize(source, stream) {\n    function getCharCode(offset) {\n        return offset < sourceLength ? source.charCodeAt(offset) : 0;\n    }\n\n    // § 4.3.3. Consume a numeric token\n    function consumeNumericToken() {\n        // Consume a number and let number be the result.\n        offset = consumeNumber(source, offset);\n\n        // If the next 3 input code points would start an identifier, then:\n        if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {\n            // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.\n            // Consume a name. Set the <dimension-token>’s unit to the returned value.\n            // Return the <dimension-token>.\n            type = TYPE.Dimension;\n            offset = consumeName(source, offset);\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.\n        if (getCharCode(offset) === 0x0025) {\n            // Create a <percentage-token> with the same value as number, and return it.\n            type = TYPE.Percentage;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create a <number-token> with the same value and type flag as number, and return it.\n        type = TYPE.Number;\n    }\n\n    // § 4.3.4. Consume an ident-like token\n    function consumeIdentLikeToken() {\n        const nameStartOffset = offset;\n\n        // Consume a name, and let string be the result.\n        offset = consumeName(source, offset);\n\n        // If string’s value is an ASCII case-insensitive match for \"url\",\n        // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {\n            // While the next two input code points are whitespace, consume the next input code point.\n            offset = findWhiteSpaceEnd(source, offset + 1);\n\n            // If the next one or two input code points are U+0022 QUOTATION MARK (\"), U+0027 APOSTROPHE ('),\n            // or whitespace followed by U+0022 QUOTATION MARK (\") or U+0027 APOSTROPHE ('),\n            // then create a <function-token> with its value set to string and return it.\n            if (getCharCode(offset) === 0x0022 ||\n                getCharCode(offset) === 0x0027) {\n                type = TYPE.Function;\n                offset = nameStartOffset + 4;\n                return;\n            }\n\n            // Otherwise, consume a url token, and return it.\n            consumeUrlToken();\n            return;\n        }\n\n        // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.\n        // Create a <function-token> with its value set to string and return it.\n        if (getCharCode(offset) === 0x0028) {\n            type = TYPE.Function;\n            offset++;\n            return;\n        }\n\n        // Otherwise, create an <ident-token> with its value set to string and return it.\n        type = TYPE.Ident;\n    }\n\n    // § 4.3.5. Consume a string token\n    function consumeStringToken(endingCodePoint) {\n        // This algorithm may be called with an ending code point, which denotes the code point\n        // that ends the string. If an ending code point is not specified,\n        // the current input code point is used.\n        if (!endingCodePoint) {\n            endingCodePoint = getCharCode(offset++);\n        }\n\n        // Initially create a <string-token> with its value set to the empty string.\n        type = TYPE.String;\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory(code)) {\n                // ending code point\n                case endingCodePoint:\n                    // Return the <string-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory.Eof:\n                    // This is a parse error. Return the <string-token>.\n                    return;\n\n                // newline\n                case charCodeCategory.WhiteSpace:\n                    if (isNewline(code)) {\n                        // This is a parse error. Reconsume the current input code point,\n                        // create a <bad-string-token>, and return it.\n                        offset += getNewlineLength(source, offset, code);\n                        type = TYPE.BadString;\n                        return;\n                    }\n                    break;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the next input code point is EOF, do nothing.\n                    if (offset === source.length - 1) {\n                        break;\n                    }\n\n                    var nextCode = getCharCode(offset + 1);\n\n                    // Otherwise, if the next input code point is a newline, consume it.\n                    if (isNewline(nextCode)) {\n                        offset += getNewlineLength(source, offset + 1, nextCode);\n                    } else if (isValidEscape(code, nextCode)) {\n                        // Otherwise, (the stream starts with a valid escape) consume\n                        // an escaped code point and append the returned code point to\n                        // the <string-token>’s value.\n                        offset = consumeEscaped(source, offset) - 1;\n                    }\n                    break;\n\n                // anything else\n                // Append the current input code point to the <string-token>’s value.\n            }\n        }\n    }\n\n    // § 4.3.6. Consume a url token\n    // Note: This algorithm assumes that the initial \"url(\" has already been consumed.\n    // This algorithm also assumes that it’s being called to consume an \"unquoted\" value, like url(foo).\n    // A quoted value, like url(\"foo\"), is parsed as a <function-token>. Consume an ident-like token\n    // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.\n    function consumeUrlToken() {\n        // Initially create a <url-token> with its value set to the empty string.\n        type = TYPE.Url;\n\n        // Consume as much whitespace as possible.\n        offset = findWhiteSpaceEnd(source, offset);\n\n        // Repeatedly consume the next input code point from the stream:\n        for (; offset < source.length; offset++) {\n            var code = source.charCodeAt(offset);\n\n            switch (charCodeCategory(code)) {\n                // U+0029 RIGHT PARENTHESIS ())\n                case 0x0029:\n                    // Return the <url-token>.\n                    offset++;\n                    return;\n\n                // EOF\n                case charCodeCategory.Eof:\n                    // This is a parse error. Return the <url-token>.\n                    return;\n\n                // whitespace\n                case charCodeCategory.WhiteSpace:\n                    // Consume as much whitespace as possible.\n                    offset = findWhiteSpaceEnd(source, offset);\n\n                    // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,\n                    // consume it and return the <url-token>\n                    // (if EOF was encountered, this is a parse error);\n                    if (getCharCode(offset) === 0x0029 || offset >= source.length) {\n                        if (offset < source.length) {\n                            offset++;\n                        }\n                        return;\n                    }\n\n                    // otherwise, consume the remnants of a bad url, create a <bad-url-token>,\n                    // and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // U+0022 QUOTATION MARK (\")\n                // U+0027 APOSTROPHE (')\n                // U+0028 LEFT PARENTHESIS (()\n                // non-printable code point\n                case 0x0022:\n                case 0x0027:\n                case 0x0028:\n                case charCodeCategory.NonPrintable:\n                    // This is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // U+005C REVERSE SOLIDUS (\\)\n                case 0x005C:\n                    // If the stream starts with a valid escape, consume an escaped code point and\n                    // append the returned code point to the <url-token>’s value.\n                    if (isValidEscape(code, getCharCode(offset + 1))) {\n                        offset = consumeEscaped(source, offset) - 1;\n                        break;\n                    }\n\n                    // Otherwise, this is a parse error. Consume the remnants of a bad url,\n                    // create a <bad-url-token>, and return it.\n                    offset = consumeBadUrlRemnants(source, offset);\n                    type = TYPE.BadUrl;\n                    return;\n\n                // anything else\n                // Append the current input code point to the <url-token>’s value.\n            }\n        }\n    }\n\n    if (!stream) {\n        stream = new TokenStream();\n    }\n\n    // ensure source is a string\n    source = String(source || '');\n\n    var sourceLength = source.length;\n    var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1); // +1 because of eof-token\n    var balance = adoptBuffer(stream.balance, sourceLength + 1);\n    var tokenCount = 0;\n    var start = isBOM(getCharCode(0));\n    var offset = start;\n    var balanceCloseType = 0;\n    var balanceStart = 0;\n    var balancePrev = 0;\n\n    // https://drafts.csswg.org/css-syntax-3/#consume-token\n    // § 4.3.1. Consume a token\n    while (offset < sourceLength) {\n        var code = source.charCodeAt(offset);\n        var type = 0;\n\n        balance[tokenCount] = sourceLength;\n\n        switch (charCodeCategory(code)) {\n            // whitespace\n            case charCodeCategory.WhiteSpace:\n                // Consume as much whitespace as possible. Return a <whitespace-token>.\n                type = TYPE.WhiteSpace;\n                offset = findWhiteSpaceEnd(source, offset + 1);\n                break;\n\n            // U+0022 QUOTATION MARK (\")\n            case 0x0022:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0023 NUMBER SIGN (#)\n            case 0x0023:\n                // If the next input code point is a name code point or the next two input code points are a valid escape, then:\n                if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // Create a <hash-token>.\n                    type = TYPE.Hash;\n\n                    // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to \"id\".\n                    // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    //     // TODO: set id flag\n                    // }\n\n                    // Consume a name, and set the <hash-token>’s value to the returned string.\n                    offset = consumeName(source, offset + 1);\n\n                    // Return the <hash-token>.\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0027 APOSTROPHE (')\n            case 0x0027:\n                // Consume a string token and return it.\n                consumeStringToken();\n                break;\n\n            // U+0028 LEFT PARENTHESIS (()\n            case 0x0028:\n                // Return a <(-token>.\n                type = TYPE.LeftParenthesis;\n                offset++;\n                break;\n\n            // U+0029 RIGHT PARENTHESIS ())\n            case 0x0029:\n                // Return a <)-token>.\n                type = TYPE.RightParenthesis;\n                offset++;\n                break;\n\n            // U+002B PLUS SIGN (+)\n            case 0x002B:\n                // If the input stream starts with a number, ...\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+002C COMMA (,)\n            case 0x002C:\n                // Return a <comma-token>.\n                type = TYPE.Comma;\n                offset++;\n                break;\n\n            // U+002D HYPHEN-MINUS (-)\n            case 0x002D:\n                // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.\n                    if (getCharCode(offset + 1) === 0x002D &&\n                        getCharCode(offset + 2) === 0x003E) {\n                        type = TYPE.CDC;\n                        offset = offset + 3;\n                    } else {\n                        // Otherwise, if the input stream starts with an identifier, ...\n                        if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                            // ... reconsume the current input code point, consume an ident-like token, and return it.\n                            consumeIdentLikeToken();\n                        } else {\n                            // Otherwise, return a <delim-token> with its value set to the current input code point.\n                            type = TYPE.Delim;\n                            offset++;\n                        }\n                    }\n                }\n                break;\n\n            // U+002E FULL STOP (.)\n            case 0x002E:\n                // If the input stream starts with a number, ...\n                if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {\n                    // ... reconsume the current input code point, consume a numeric token, and return it.\n                    consumeNumericToken();\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+002F SOLIDUS (/)\n            case 0x002F:\n                // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),\n                if (getCharCode(offset + 1) === 0x002A) {\n                    // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)\n                    // followed by a U+002F SOLIDUS (/), or up to an EOF code point.\n                    type = TYPE.Comment;\n                    offset = source.indexOf('*/', offset + 2) + 2;\n                    if (offset === 1) {\n                        offset = source.length;\n                    }\n                } else {\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+003A COLON (:)\n            case 0x003A:\n                // Return a <colon-token>.\n                type = TYPE.Colon;\n                offset++;\n                break;\n\n            // U+003B SEMICOLON (;)\n            case 0x003B:\n                // Return a <semicolon-token>.\n                type = TYPE.Semicolon;\n                offset++;\n                break;\n\n            // U+003C LESS-THAN SIGN (<)\n            case 0x003C:\n                // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...\n                if (getCharCode(offset + 1) === 0x0021 &&\n                    getCharCode(offset + 2) === 0x002D &&\n                    getCharCode(offset + 3) === 0x002D) {\n                    // ... consume them and return a <CDO-token>.\n                    type = TYPE.CDO;\n                    offset = offset + 4;\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+0040 COMMERCIAL AT (@)\n            case 0x0040:\n                // If the next 3 input code points would start an identifier, ...\n                if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {\n                    // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.\n                    type = TYPE.AtKeyword;\n                    offset = consumeName(source, offset + 1);\n                } else {\n                    // Otherwise, return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n\n                break;\n\n            // U+005B LEFT SQUARE BRACKET ([)\n            case 0x005B:\n                // Return a <[-token>.\n                type = TYPE.LeftSquareBracket;\n                offset++;\n                break;\n\n            // U+005C REVERSE SOLIDUS (\\)\n            case 0x005C:\n                // If the input stream starts with a valid escape, ...\n                if (isValidEscape(code, getCharCode(offset + 1))) {\n                    // ... reconsume the current input code point, consume an ident-like token, and return it.\n                    consumeIdentLikeToken();\n                } else {\n                    // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.\n                    type = TYPE.Delim;\n                    offset++;\n                }\n                break;\n\n            // U+005D RIGHT SQUARE BRACKET (])\n            case 0x005D:\n                // Return a <]-token>.\n                type = TYPE.RightSquareBracket;\n                offset++;\n                break;\n\n            // U+007B LEFT CURLY BRACKET ({)\n            case 0x007B:\n                // Return a <{-token>.\n                type = TYPE.LeftCurlyBracket;\n                offset++;\n                break;\n\n            // U+007D RIGHT CURLY BRACKET (})\n            case 0x007D:\n                // Return a <}-token>.\n                type = TYPE.RightCurlyBracket;\n                offset++;\n                break;\n\n            // digit\n            case charCodeCategory.Digit:\n                // Reconsume the current input code point, consume a numeric token, and return it.\n                consumeNumericToken();\n                break;\n\n            // name-start code point\n            case charCodeCategory.NameStart:\n                // Reconsume the current input code point, consume an ident-like token, and return it.\n                consumeIdentLikeToken();\n                break;\n\n            // EOF\n            case charCodeCategory.Eof:\n                // Return an <EOF-token>.\n                break;\n\n            // anything else\n            default:\n                // Return a <delim-token> with its value set to the current input code point.\n                type = TYPE.Delim;\n                offset++;\n        }\n\n        switch (type) {\n            case balanceCloseType:\n                balancePrev = balanceStart & OFFSET_MASK;\n                balanceStart = balance[balancePrev];\n                balanceCloseType = balanceStart >> TYPE_SHIFT;\n                balance[tokenCount] = balancePrev;\n                balance[balancePrev++] = tokenCount;\n                for (; balancePrev < tokenCount; balancePrev++) {\n                    if (balance[balancePrev] === sourceLength) {\n                        balance[balancePrev] = tokenCount;\n                    }\n                }\n                break;\n\n            case TYPE.LeftParenthesis:\n            case TYPE.Function:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightParenthesis;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n\n            case TYPE.LeftSquareBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightSquareBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n\n            case TYPE.LeftCurlyBracket:\n                balance[tokenCount] = balanceStart;\n                balanceCloseType = TYPE.RightCurlyBracket;\n                balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;\n                break;\n        }\n\n        offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | offset;\n    }\n\n    // finalize buffers\n    offsetAndType[tokenCount] = (TYPE.EOF << TYPE_SHIFT) | offset; // <EOF-token>\n    balance[tokenCount] = sourceLength;\n    balance[sourceLength] = sourceLength; // prevents false positive balance match with any token\n    while (balanceStart !== 0) {\n        balancePrev = balanceStart & OFFSET_MASK;\n        balanceStart = balance[balancePrev];\n        balance[balancePrev] = sourceLength;\n    }\n\n    // update stream\n    stream.source = source;\n    stream.firstCharOffset = start;\n    stream.offsetAndType = offsetAndType;\n    stream.tokenCount = tokenCount;\n    stream.balance = balance;\n    stream.reset();\n    stream.next();\n\n    return stream;\n}\n\n// extend tokenizer with constants\nObject.keys(constants).forEach(function(key) {\n    tokenize[key] = constants[key];\n});\n\n// extend tokenizer with static methods from utils\nObject.keys(charCodeDefinitions).forEach(function(key) {\n    tokenize[key] = charCodeDefinitions[key];\n});\nObject.keys(utils).forEach(function(key) {\n    tokenize[key] = utils[key];\n});\n\nmodule.exports = tokenize;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}