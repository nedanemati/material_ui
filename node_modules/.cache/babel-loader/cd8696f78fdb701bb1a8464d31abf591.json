{"ast":null,"code":"var cmpChar = require('../../tokenizer').cmpChar;\n\nvar isDigit = require('../../tokenizer').isDigit;\n\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B; // U+002B PLUS SIGN (+)\n\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\n\nvar N = 0x006E; // U+006E LATIN SMALL LETTER N (n)\n\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkInteger(offset, disallowSign) {\n  var pos = this.scanner.tokenStart + offset;\n  var code = this.scanner.source.charCodeAt(pos);\n\n  if (code === PLUSSIGN || code === HYPHENMINUS) {\n    if (disallowSign) {\n      this.error('Number sign is not allowed');\n    }\n\n    pos++;\n  }\n\n  for (; pos < this.scanner.tokenEnd; pos++) {\n    if (!isDigit(this.scanner.source.charCodeAt(pos))) {\n      this.error('Integer is expected', pos);\n    }\n  }\n}\n\nfunction checkTokenIsInteger(disallowSign) {\n  return checkInteger.call(this, 0, disallowSign);\n}\n\nfunction expectCharCode(offset, code) {\n  if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n    var msg = '';\n\n    switch (code) {\n      case N:\n        msg = 'N is expected';\n        break;\n\n      case HYPHENMINUS:\n        msg = 'HyphenMinus is expected';\n        break;\n    }\n\n    this.error(msg, this.scanner.tokenStart + offset);\n  }\n} // ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\n\n\nfunction consumeB() {\n  var offset = 0;\n  var sign = 0;\n  var type = this.scanner.tokenType;\n\n  while (type === WHITESPACE || type === COMMENT) {\n    type = this.scanner.lookupType(++offset);\n  }\n\n  if (type !== NUMBER) {\n    if (this.scanner.isDelim(PLUSSIGN, offset) || this.scanner.isDelim(HYPHENMINUS, offset)) {\n      sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n\n      do {\n        type = this.scanner.lookupType(++offset);\n      } while (type === WHITESPACE || type === COMMENT);\n\n      if (type !== NUMBER) {\n        this.scanner.skip(offset);\n        checkTokenIsInteger.call(this, DISALLOW_SIGN);\n      }\n    } else {\n      return null;\n    }\n  }\n\n  if (offset > 0) {\n    this.scanner.skip(offset);\n  }\n\n  if (sign === 0) {\n    type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n\n    if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n      this.error('Number sign is expected');\n    }\n  }\n\n  checkTokenIsInteger.call(this, sign !== 0);\n  return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);\n} // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\n\n\nmodule.exports = {\n  name: 'AnPlusB',\n  structure: {\n    a: [String, null],\n    b: [String, null]\n  },\n  parse: function () {\n    /* eslint-disable brace-style*/\n    var start = this.scanner.tokenStart;\n    var a = null;\n    var b = null; // <integer>\n\n    if (this.scanner.tokenType === NUMBER) {\n      checkTokenIsInteger.call(this, ALLOW_SIGN);\n      b = this.consume(NUMBER);\n    } // -n\n    // -n <signed-integer>\n    // -n ['+' | '-'] <signless-integer>\n    // -n- <signless-integer>\n    // <dashndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {\n      a = '-1';\n      expectCharCode.call(this, 1, N);\n\n      switch (this.scanner.getTokenLength()) {\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        case 2:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n        // -n- <signless-integer>\n\n        case 3:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n        // <dashndashdigit-ident>\n\n        default:\n          expectCharCode.call(this, 2, HYPHENMINUS);\n          checkInteger.call(this, 3, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + 2);\n      }\n    } // '+'? n\n    // '+'? n <signed-integer>\n    // '+'? n ['+' | '-'] <signless-integer>\n    // '+'? n- <signless-integer>\n    // '+'? <ndashdigit-ident>\n    else if (this.scanner.tokenType === IDENT || this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT) {\n      var sign = 0;\n      a = '1'; // just ignore a plus\n\n      if (this.scanner.isDelim(PLUSSIGN)) {\n        sign = 1;\n        this.scanner.next();\n      }\n\n      expectCharCode.call(this, 0, N);\n\n      switch (this.scanner.getTokenLength()) {\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        case 1:\n          this.scanner.next();\n          b = consumeB.call(this);\n          break;\n        // '+'? n- <signless-integer>\n\n        case 2:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n          break;\n        // '+'? <ndashdigit-ident>\n\n        default:\n          expectCharCode.call(this, 1, HYPHENMINUS);\n          checkInteger.call(this, 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(start + sign + 1);\n      }\n    } // <ndashdigit-dimension>\n    // <ndash-dimension> <signless-integer>\n    // <n-dimension>\n    // <n-dimension> <signed-integer>\n    // <n-dimension> ['+' | '-'] <signless-integer>\n    else if (this.scanner.tokenType === DIMENSION) {\n      var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n      var sign = code === PLUSSIGN || code === HYPHENMINUS;\n\n      for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n        if (!isDigit(this.scanner.source.charCodeAt(i))) {\n          break;\n        }\n      }\n\n      if (i === this.scanner.tokenStart + sign) {\n        this.error('Integer is expected', this.scanner.tokenStart + sign);\n      }\n\n      expectCharCode.call(this, i - this.scanner.tokenStart, N);\n      a = this.scanner.source.substring(start, i); // <n-dimension>\n      // <n-dimension> <signed-integer>\n      // <n-dimension> ['+' | '-'] <signless-integer>\n\n      if (i + 1 === this.scanner.tokenEnd) {\n        this.scanner.next();\n        b = consumeB.call(this);\n      } else {\n        expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS); // <ndash-dimension> <signless-integer>\n\n        if (i + 2 === this.scanner.tokenEnd) {\n          this.scanner.next();\n          this.scanner.skipSC();\n          checkTokenIsInteger.call(this, DISALLOW_SIGN);\n          b = '-' + this.consume(NUMBER);\n        } // <ndashdigit-dimension>\n        else {\n          checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n          this.scanner.next();\n          b = this.scanner.substrToCursor(i + 1);\n        }\n      }\n    } else {\n      this.error();\n    }\n\n    if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n      a = a.substr(1);\n    }\n\n    if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n      b = b.substr(1);\n    }\n\n    return {\n      type: 'AnPlusB',\n      loc: this.getLocation(start, this.scanner.tokenStart),\n      a: a,\n      b: b\n    };\n  },\n  generate: function (node) {\n    var a = node.a !== null && node.a !== undefined;\n    var b = node.b !== null && node.b !== undefined;\n\n    if (a) {\n      this.chunk(node.a === '+1' ? '+n' : // eslint-disable-line operator-linebreak, indent\n      node.a === '1' ? 'n' : // eslint-disable-line operator-linebreak, indent\n      node.a === '-1' ? '-n' : // eslint-disable-line operator-linebreak, indent\n      node.a + 'n' // eslint-disable-line operator-linebreak, indent\n      );\n\n      if (b) {\n        b = String(node.b);\n\n        if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n          this.chunk(b.charAt(0));\n          this.chunk(b.substr(1));\n        } else {\n          this.chunk('+');\n          this.chunk(b);\n        }\n      }\n    } else {\n      this.chunk(String(node.b));\n    }\n  }\n};","map":{"version":3,"names":["cmpChar","require","isDigit","TYPE","WHITESPACE","WhiteSpace","COMMENT","Comment","IDENT","Ident","NUMBER","Number","DIMENSION","Dimension","PLUSSIGN","HYPHENMINUS","N","DISALLOW_SIGN","ALLOW_SIGN","checkInteger","offset","disallowSign","pos","scanner","tokenStart","code","source","charCodeAt","error","tokenEnd","checkTokenIsInteger","call","expectCharCode","msg","consumeB","sign","type","tokenType","lookupType","isDelim","skip","consume","module","exports","name","structure","a","String","b","parse","start","getTokenLength","next","skipSC","substrToCursor","i","substring","substr","loc","getLocation","generate","node","undefined","chunk","charAt"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/syntax/node/AnPlusB.js"],"sourcesContent":["var cmpChar = require('../../tokenizer').cmpChar;\nvar isDigit = require('../../tokenizer').isDigit;\nvar TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar NUMBER = TYPE.Number;\nvar DIMENSION = TYPE.Dimension;\nvar PLUSSIGN = 0x002B;    // U+002B PLUS SIGN (+)\nvar HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)\nvar N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)\nvar DISALLOW_SIGN = true;\nvar ALLOW_SIGN = false;\n\nfunction checkInteger(offset, disallowSign) {\n    var pos = this.scanner.tokenStart + offset;\n    var code = this.scanner.source.charCodeAt(pos);\n\n    if (code === PLUSSIGN || code === HYPHENMINUS) {\n        if (disallowSign) {\n            this.error('Number sign is not allowed');\n        }\n        pos++;\n    }\n\n    for (; pos < this.scanner.tokenEnd; pos++) {\n        if (!isDigit(this.scanner.source.charCodeAt(pos))) {\n            this.error('Integer is expected', pos);\n        }\n    }\n}\n\nfunction checkTokenIsInteger(disallowSign) {\n    return checkInteger.call(this, 0, disallowSign);\n}\n\nfunction expectCharCode(offset, code) {\n    if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {\n        var msg = '';\n\n        switch (code) {\n            case N:\n                msg = 'N is expected';\n                break;\n            case HYPHENMINUS:\n                msg = 'HyphenMinus is expected';\n                break;\n        }\n\n        this.error(msg, this.scanner.tokenStart + offset);\n    }\n}\n\n// ... <signed-integer>\n// ... ['+' | '-'] <signless-integer>\nfunction consumeB() {\n    var offset = 0;\n    var sign = 0;\n    var type = this.scanner.tokenType;\n\n    while (type === WHITESPACE || type === COMMENT) {\n        type = this.scanner.lookupType(++offset);\n    }\n\n    if (type !== NUMBER) {\n        if (this.scanner.isDelim(PLUSSIGN, offset) ||\n            this.scanner.isDelim(HYPHENMINUS, offset)) {\n            sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;\n\n            do {\n                type = this.scanner.lookupType(++offset);\n            } while (type === WHITESPACE || type === COMMENT);\n\n            if (type !== NUMBER) {\n                this.scanner.skip(offset);\n                checkTokenIsInteger.call(this, DISALLOW_SIGN);\n            }\n        } else {\n            return null;\n        }\n    }\n\n    if (offset > 0) {\n        this.scanner.skip(offset);\n    }\n\n    if (sign === 0) {\n        type = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n        if (type !== PLUSSIGN && type !== HYPHENMINUS) {\n            this.error('Number sign is expected');\n        }\n    }\n\n    checkTokenIsInteger.call(this, sign !== 0);\n    return sign === HYPHENMINUS ? '-' + this.consume(NUMBER) : this.consume(NUMBER);\n}\n\n// An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb\nmodule.exports = {\n    name: 'AnPlusB',\n    structure: {\n        a: [String, null],\n        b: [String, null]\n    },\n    parse: function() {\n        /* eslint-disable brace-style*/\n        var start = this.scanner.tokenStart;\n        var a = null;\n        var b = null;\n\n        // <integer>\n        if (this.scanner.tokenType === NUMBER) {\n            checkTokenIsInteger.call(this, ALLOW_SIGN);\n            b = this.consume(NUMBER);\n        }\n\n        // -n\n        // -n <signed-integer>\n        // -n ['+' | '-'] <signless-integer>\n        // -n- <signless-integer>\n        // <dashndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {\n            a = '-1';\n\n            expectCharCode.call(this, 1, N);\n\n            switch (this.scanner.getTokenLength()) {\n                // -n\n                // -n <signed-integer>\n                // -n ['+' | '-'] <signless-integer>\n                case 2:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // -n- <signless-integer>\n                case 3:\n                    expectCharCode.call(this, 2, HYPHENMINUS);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER);\n                    break;\n\n                // <dashndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 2, HYPHENMINUS);\n                    checkInteger.call(this, 3, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + 2);\n            }\n        }\n\n        // '+'? n\n        // '+'? n <signed-integer>\n        // '+'? n ['+' | '-'] <signless-integer>\n        // '+'? n- <signless-integer>\n        // '+'? <ndashdigit-ident>\n        else if (this.scanner.tokenType === IDENT || (this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT)) {\n            var sign = 0;\n            a = '1';\n\n            // just ignore a plus\n            if (this.scanner.isDelim(PLUSSIGN)) {\n                sign = 1;\n                this.scanner.next();\n            }\n\n            expectCharCode.call(this, 0, N);\n\n            switch (this.scanner.getTokenLength()) {\n                // '+'? n\n                // '+'? n <signed-integer>\n                // '+'? n ['+' | '-'] <signless-integer>\n                case 1:\n                    this.scanner.next();\n                    b = consumeB.call(this);\n                    break;\n\n                // '+'? n- <signless-integer>\n                case 2:\n                    expectCharCode.call(this, 1, HYPHENMINUS);\n\n                    this.scanner.next();\n                    this.scanner.skipSC();\n\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n\n                    b = '-' + this.consume(NUMBER);\n                    break;\n\n                // '+'? <ndashdigit-ident>\n                default:\n                    expectCharCode.call(this, 1, HYPHENMINUS);\n                    checkInteger.call(this, 2, DISALLOW_SIGN);\n                    this.scanner.next();\n\n                    b = this.scanner.substrToCursor(start + sign + 1);\n            }\n        }\n\n        // <ndashdigit-dimension>\n        // <ndash-dimension> <signless-integer>\n        // <n-dimension>\n        // <n-dimension> <signed-integer>\n        // <n-dimension> ['+' | '-'] <signless-integer>\n        else if (this.scanner.tokenType === DIMENSION) {\n            var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);\n            var sign = code === PLUSSIGN || code === HYPHENMINUS;\n\n            for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {\n                if (!isDigit(this.scanner.source.charCodeAt(i))) {\n                    break;\n                }\n            }\n\n            if (i === this.scanner.tokenStart + sign) {\n                this.error('Integer is expected', this.scanner.tokenStart + sign);\n            }\n\n            expectCharCode.call(this, i - this.scanner.tokenStart, N);\n            a = this.scanner.source.substring(start, i);\n\n            // <n-dimension>\n            // <n-dimension> <signed-integer>\n            // <n-dimension> ['+' | '-'] <signless-integer>\n            if (i + 1 === this.scanner.tokenEnd) {\n                this.scanner.next();\n                b = consumeB.call(this);\n            } else {\n                expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);\n\n                // <ndash-dimension> <signless-integer>\n                if (i + 2 === this.scanner.tokenEnd) {\n                    this.scanner.next();\n                    this.scanner.skipSC();\n                    checkTokenIsInteger.call(this, DISALLOW_SIGN);\n                    b = '-' + this.consume(NUMBER);\n                }\n                // <ndashdigit-dimension>\n                else {\n                    checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);\n                    this.scanner.next();\n                    b = this.scanner.substrToCursor(i + 1);\n                }\n            }\n        } else {\n            this.error();\n        }\n\n        if (a !== null && a.charCodeAt(0) === PLUSSIGN) {\n            a = a.substr(1);\n        }\n\n        if (b !== null && b.charCodeAt(0) === PLUSSIGN) {\n            b = b.substr(1);\n        }\n\n        return {\n            type: 'AnPlusB',\n            loc: this.getLocation(start, this.scanner.tokenStart),\n            a: a,\n            b: b\n        };\n    },\n    generate: function(node) {\n        var a = node.a !== null && node.a !== undefined;\n        var b = node.b !== null && node.b !== undefined;\n\n        if (a) {\n            this.chunk(\n                node.a === '+1' ? '+n' : // eslint-disable-line operator-linebreak, indent\n                node.a ===  '1' ?  'n' : // eslint-disable-line operator-linebreak, indent\n                node.a === '-1' ? '-n' : // eslint-disable-line operator-linebreak, indent\n                node.a + 'n'             // eslint-disable-line operator-linebreak, indent\n            );\n\n            if (b) {\n                b = String(node.b);\n                if (b.charAt(0) === '-' || b.charAt(0) === '+') {\n                    this.chunk(b.charAt(0));\n                    this.chunk(b.substr(1));\n                } else {\n                    this.chunk('+');\n                    this.chunk(b);\n                }\n            }\n        } else {\n            this.chunk(String(node.b));\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}