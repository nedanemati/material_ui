{"ast":null,"code":"var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nfunction consumeRaw() {\n  return this.createSingleNodeList(this.Raw(this.scanner.tokenIndex, null, false));\n}\n\nfunction parentheses() {\n  this.scanner.skipSC();\n\n  if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {\n    return this.createSingleNodeList(this.Declaration());\n  }\n\n  return readSequence.call(this);\n}\n\nfunction readSequence() {\n  var children = this.createList();\n  var space = null;\n  var child;\n  this.scanner.skipSC();\n\n  scan: while (!this.scanner.eof) {\n    switch (this.scanner.tokenType) {\n      case WHITESPACE:\n        space = this.WhiteSpace();\n        continue;\n\n      case COMMENT:\n        this.scanner.next();\n        continue;\n\n      case FUNCTION:\n        child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n        break;\n\n      case IDENT:\n        child = this.Identifier();\n        break;\n\n      case LEFTPARENTHESIS:\n        child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n        break;\n\n      default:\n        break scan;\n    }\n\n    if (space !== null) {\n      children.push(space);\n      space = null;\n    }\n\n    children.push(child);\n  }\n\n  return children;\n}\n\nmodule.exports = {\n  parse: {\n    prelude: function () {\n      var children = readSequence.call(this);\n\n      if (this.getFirstListNode(children) === null) {\n        this.error('Condition is expected');\n      }\n\n      return children;\n    },\n    block: function () {\n      return this.Block(false);\n    }\n  }\n};","map":{"version":3,"names":["TYPE","require","WHITESPACE","WhiteSpace","COMMENT","Comment","IDENT","Ident","FUNCTION","Function","COLON","Colon","LEFTPARENTHESIS","LeftParenthesis","consumeRaw","createSingleNodeList","Raw","scanner","tokenIndex","parentheses","skipSC","tokenType","lookupNonWSType","Declaration","readSequence","call","children","createList","space","child","scan","eof","next","scope","AtrulePrelude","Identifier","Parentheses","push","module","exports","parse","prelude","getFirstListNode","error","block","Block"],"sources":["/Users/nedanemati/Desktop/material-ui-github/node_modules/css-tree/lib/syntax/atrule/supports.js"],"sourcesContent":["var TYPE = require('../../tokenizer').TYPE;\n\nvar WHITESPACE = TYPE.WhiteSpace;\nvar COMMENT = TYPE.Comment;\nvar IDENT = TYPE.Ident;\nvar FUNCTION = TYPE.Function;\nvar COLON = TYPE.Colon;\nvar LEFTPARENTHESIS = TYPE.LeftParenthesis;\n\nfunction consumeRaw() {\n    return this.createSingleNodeList(\n        this.Raw(this.scanner.tokenIndex, null, false)\n    );\n}\n\nfunction parentheses() {\n    this.scanner.skipSC();\n\n    if (this.scanner.tokenType === IDENT &&\n        this.lookupNonWSType(1) === COLON) {\n        return this.createSingleNodeList(\n            this.Declaration()\n        );\n    }\n\n    return readSequence.call(this);\n}\n\nfunction readSequence() {\n    var children = this.createList();\n    var space = null;\n    var child;\n\n    this.scanner.skipSC();\n\n    scan:\n    while (!this.scanner.eof) {\n        switch (this.scanner.tokenType) {\n            case WHITESPACE:\n                space = this.WhiteSpace();\n                continue;\n\n            case COMMENT:\n                this.scanner.next();\n                continue;\n\n            case FUNCTION:\n                child = this.Function(consumeRaw, this.scope.AtrulePrelude);\n                break;\n\n            case IDENT:\n                child = this.Identifier();\n                break;\n\n            case LEFTPARENTHESIS:\n                child = this.Parentheses(parentheses, this.scope.AtrulePrelude);\n                break;\n\n            default:\n                break scan;\n        }\n\n        if (space !== null) {\n            children.push(space);\n            space = null;\n        }\n\n        children.push(child);\n    }\n\n    return children;\n}\n\nmodule.exports = {\n    parse: {\n        prelude: function() {\n            var children = readSequence.call(this);\n\n            if (this.getFirstListNode(children) === null) {\n                this.error('Condition is expected');\n            }\n\n            return children;\n        },\n        block: function() {\n            return this.Block(false);\n        }\n    }\n};\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BD,IAAtC;;AAEA,IAAIE,UAAU,GAAGF,IAAI,CAACG,UAAtB;AACA,IAAIC,OAAO,GAAGJ,IAAI,CAACK,OAAnB;AACA,IAAIC,KAAK,GAAGN,IAAI,CAACO,KAAjB;AACA,IAAIC,QAAQ,GAAGR,IAAI,CAACS,QAApB;AACA,IAAIC,KAAK,GAAGV,IAAI,CAACW,KAAjB;AACA,IAAIC,eAAe,GAAGZ,IAAI,CAACa,eAA3B;;AAEA,SAASC,UAAT,GAAsB;EAClB,OAAO,KAAKC,oBAAL,CACH,KAAKC,GAAL,CAAS,KAAKC,OAAL,CAAaC,UAAtB,EAAkC,IAAlC,EAAwC,KAAxC,CADG,CAAP;AAGH;;AAED,SAASC,WAAT,GAAuB;EACnB,KAAKF,OAAL,CAAaG,MAAb;;EAEA,IAAI,KAAKH,OAAL,CAAaI,SAAb,KAA2Bf,KAA3B,IACA,KAAKgB,eAAL,CAAqB,CAArB,MAA4BZ,KADhC,EACuC;IACnC,OAAO,KAAKK,oBAAL,CACH,KAAKQ,WAAL,EADG,CAAP;EAGH;;EAED,OAAOC,YAAY,CAACC,IAAb,CAAkB,IAAlB,CAAP;AACH;;AAED,SAASD,YAAT,GAAwB;EACpB,IAAIE,QAAQ,GAAG,KAAKC,UAAL,EAAf;EACA,IAAIC,KAAK,GAAG,IAAZ;EACA,IAAIC,KAAJ;EAEA,KAAKZ,OAAL,CAAaG,MAAb;;EAEAU,IAAI,EACJ,OAAO,CAAC,KAAKb,OAAL,CAAac,GAArB,EAA0B;IACtB,QAAQ,KAAKd,OAAL,CAAaI,SAArB;MACI,KAAKnB,UAAL;QACI0B,KAAK,GAAG,KAAKzB,UAAL,EAAR;QACA;;MAEJ,KAAKC,OAAL;QACI,KAAKa,OAAL,CAAae,IAAb;QACA;;MAEJ,KAAKxB,QAAL;QACIqB,KAAK,GAAG,KAAKpB,QAAL,CAAcK,UAAd,EAA0B,KAAKmB,KAAL,CAAWC,aAArC,CAAR;QACA;;MAEJ,KAAK5B,KAAL;QACIuB,KAAK,GAAG,KAAKM,UAAL,EAAR;QACA;;MAEJ,KAAKvB,eAAL;QACIiB,KAAK,GAAG,KAAKO,WAAL,CAAiBjB,WAAjB,EAA8B,KAAKc,KAAL,CAAWC,aAAzC,CAAR;QACA;;MAEJ;QACI,MAAMJ,IAAN;IAtBR;;IAyBA,IAAIF,KAAK,KAAK,IAAd,EAAoB;MAChBF,QAAQ,CAACW,IAAT,CAAcT,KAAd;MACAA,KAAK,GAAG,IAAR;IACH;;IAEDF,QAAQ,CAACW,IAAT,CAAcR,KAAd;EACH;;EAED,OAAOH,QAAP;AACH;;AAEDY,MAAM,CAACC,OAAP,GAAiB;EACbC,KAAK,EAAE;IACHC,OAAO,EAAE,YAAW;MAChB,IAAIf,QAAQ,GAAGF,YAAY,CAACC,IAAb,CAAkB,IAAlB,CAAf;;MAEA,IAAI,KAAKiB,gBAAL,CAAsBhB,QAAtB,MAAoC,IAAxC,EAA8C;QAC1C,KAAKiB,KAAL,CAAW,uBAAX;MACH;;MAED,OAAOjB,QAAP;IACH,CATE;IAUHkB,KAAK,EAAE,YAAW;MACd,OAAO,KAAKC,KAAL,CAAW,KAAX,CAAP;IACH;EAZE;AADM,CAAjB"},"metadata":{},"sourceType":"script"}